#!/usr/bin/env node
import { promises as fs } from "fs";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const repoRoot = path.resolve(__dirname, "..");
const manifestPath = path.join(repoRoot, "config", "threejs-version.json");

const htmlTargets = [
  "index.html",
  "testcase.html",
  "facet-rainbow-test.html",
  "audio-test.html",
  "test-continuous-sound.html",
  "simple-test.html"
];

const versioningModulePath = path.join(repoRoot, "src", "utils", "versioning.js");

async function readManifest() {
  const raw = await fs.readFile(manifestPath, "utf-8");
  return JSON.parse(raw);
}

function selectSupported(manifest, selector) {
  if (!selector) return null;
  const { supported } = manifest;
  if (!Array.isArray(supported)) return null;
  return supported.find((entry) => entry.tag === selector || entry.npm === selector) || null;
}

function resolveActive(manifest) {
  if (manifest.pinned && manifest.pinned.npm) {
    return manifest.pinned;
  }
  return manifest.latest;
}

function buildBaseUrl(manifest, npmVersion) {
  const base = manifest.cdn?.primary ?? "https://cdn.jsdelivr.net/npm";
  const pkg = manifest.cdn?.package ?? "three";
  return `${base}/${pkg}@${npmVersion}/`;
}

function applyImportMap(content, baseUrl) {
  const pkgUrl = `${baseUrl}build/three.module.js`;
  const addonsUrl = `${baseUrl}examples/jsm/`;
  const replacementOne = content.replace(
    /"three"\s*:\s*"https:\/\/cdn\.jsdelivr\.net\/npm\/three@[^"]+\/build\/three\.module\.js"/g,
    `"three": "${pkgUrl}"`
  );
  const updatedAddons = replacementOne.replace(
    /"three\/addons\/"\s*:\s*"https:\/\/cdn\.jsdelivr\.net\/npm\/three@[^"]+\/examples\/jsm\/"/g,
    `"three/addons/": "${addonsUrl}"`
  );
  const normalizedAddons = updatedAddons.replace(
    /(\"three\/addons\/\"\s*:\s*"[^"\n]+)"+/g,
    '$1"'
  );
  return normalizedAddons;
}

async function updateHtmlFiles(baseUrl) {
  await Promise.all(
    htmlTargets.map(async (relativePath) => {
      const fullPath = path.join(repoRoot, relativePath);
      try {
        const original = await fs.readFile(fullPath, "utf-8");
        if (!original.includes("cdn.jsdelivr.net")) {
          return;
        }
        const updated = applyImportMap(original, baseUrl);
        if (updated !== original) {
          await fs.writeFile(fullPath, updated, "utf-8");
        }
      } catch (error) {
        if (error.code === "ENOENT") {
          return;
        }
        throw error;
      }
    })
  );
}

async function ensureVersioningModule(manifest, active) {
  const { tag, npm } = active;
  const baseUrl = buildBaseUrl(manifest, npm);
  const fileContents = [
    "// Auto-generated by scripts/apply-threejs-version.mjs",
    "export const threeVersionInfo = {",
    `  tag: \"${tag}\",`,
    `  npm: \"${npm}\",`,
    `  baseUrl: \"${baseUrl}\"`,
    "};",
    "",
    "export function logThreeVersion(prefix = '[threejs-ball]') {",
    "  const { tag, npm } = threeVersionInfo;",
    "  // eslint-disable-next-line no-console",
    "  console.info(`${prefix} Using Three.js ${tag} (npm ${npm})`);",
    "}",
    ""
  ].join("\n");
  await fs.mkdir(path.dirname(versioningModulePath), { recursive: true });
  await fs.writeFile(versioningModulePath, fileContents, "utf-8");
}

async function writeManifest(manifest) {
  manifest.updatedAt = new Date().toISOString();
  await fs.writeFile(manifestPath, JSON.stringify(manifest, null, 2) + "\n", "utf-8");
}

function parseArgs(argv) {
  const args = { selector: null, clear: false };
  for (let i = 0; i < argv.length; i += 1) {
    const token = argv[i];
    if (token === "--tag" || token === "--npm") {
      const value = argv[i + 1];
      if (!value) {
        throw new Error(`Missing value for ${token}`);
      }
      args.selector = value;
      i += 1;
    } else if (token === "--clear") {
      args.clear = true;
    }
  }
  return args;
}

async function main() {
  const argv = process.argv.slice(2);
  const options = parseArgs(argv);
  const manifest = await readManifest();

  if (options.clear) {
    manifest.pinned = null;
  }

  if (options.selector) {
    const candidate = selectSupported(manifest, options.selector);
    if (!candidate) {
      throw new Error(`Unsupported Three.js version: ${options.selector}`);
    }
    manifest.pinned = candidate;
  }

  const active = resolveActive(manifest);
  if (!active?.npm) {
    throw new Error("Manifest missing npm version for active entry");
  }

  await writeManifest(manifest);
  const baseUrl = buildBaseUrl(manifest, active.npm);
  await updateHtmlFiles(baseUrl);
  await ensureVersioningModule(manifest, active);

  console.log(`Three.js version applied: ${active.tag} (npm ${active.npm})`);
  console.log(`Import maps updated to base URL: ${baseUrl}`);
}

main().catch((error) => {
  console.error(error.message);
  process.exitCode = 1;
});
